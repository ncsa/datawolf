/*******************************************************************************
 * Copyright (c) 2012 University of Illinois/NCSA.  All rights reserved.
 * 
 *   National Center for Supercomputing Applications (NCSA)
 *   http://www.ncsa.illinois.edu/
 * 
 * Permission is hereby granted, free of charge, to any person obtaining
 * a copy of this software and associated documentation files (the 
 * "Software"), to deal with the Software without restriction, including 
 * without limitation the rights to use, copy, modify, merge, publish,
 * distribute, sublicense, and/or sell copies of the Software, and to
 * permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * 
 * - Redistributions of source code must retain the above copyright
 *   notice, this list of conditions and the following disclaimers.
 * - Redistributions in binary form must reproduce the above copyright
 *   notice, this list of conditions and the following disclaimers in the
 *   documentation and/or other materials provided with the distribution.
 * - Neither the names of University of Illinois, NCSA, nor the names
 *   of its contributors may be used to endorse or promote products
 *   derived from this Software without specific prior written permission.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF 
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL THE CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR
 * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF 
 * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
 * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE SOFTWARE.
 ******************************************************************************/
package edu.illinois.ncsa.cyberintegrator.executor.java.tool;

import java.io.File;
import java.util.Collection;

import edu.illinois.ncsa.cyberintegrator.AbortException;
import edu.illinois.ncsa.cyberintegrator.FailedException;

/**
 * Definition of a tool for use with Cyberintegrator.
 * 
 * @author Rob Kooper
 */
public interface CyberintegratorTool {
    /**
     * Return the name of the tool. This is used when displaying the tools in
     * the toolsview.
     * 
     * @return name of the tool.
     */
    public String getName();

    /**
     * Return the version number of the tool. This number is displayed after the
     * tool name to distinguish between two versions of the same tool. It is
     * recommended to increase this number every time a new version of the tools
     * is released.
     * 
     * @return version number of the tool.
     */
    public int getVersion();

    /**
     * Long textual description of the tool. This is used to display help about
     * the use of this tool. This description should describe what the tool
     * does, any specifics about the algorithm and parameters, inputs and
     * outputs used.
     * 
     * @return description of the tool.
     */
    public String getDescription();

    /**
     * Retrieve list of inputs for the tool. This will return a list of all
     * inputs that are used by the tool.
     * 
     * @return collection of inputs.
     */
    public Collection<Dataset> getInputs();

    /**
     * Set a specific input. This function will link the id as specified in the
     * Dataset returned by getInputs() with a file on disk.
     * 
     * @param id
     *            the id of the input.
     * @param input
     *            the file that is linked with the input.
     */
    public void setInput(String id, File input);

    /**
     * Retrieve list of outputs for the tool. This will return a list of all
     * outputs that are generated by the tool.
     * 
     * @return collection of outputs.
     */
    public Collection<Dataset> getOutputs();

    /**
     * Retrieve a specific output. This will ask for a specific output, the
     * result should be a file on disk.
     * 
     * @param id
     *            the id of the output.
     * @return a file on disk with the output.
     */
    public File getOutput(String id);

    /**
     * Retrieve list of parameters for the tool. This will return a list of all
     * parameters that are used by the tool.
     * 
     * @return collection of parameters.
     */
    public Collection<Parameter> getParameters();

    /**
     * Set a specific parameter. This function will set the parameter value for
     * a specific id as specified in the Parameter returned by getParameters().
     * If there is no value set for the parameter the value will be set to null.
     * 
     * @param id
     *            the id of the parameter.
     * @param value
     *            the value for the parameter.
     */
    public void setParameter(String id, String value);

    /**
     * Execute the tool. This function is called when the tool is executed. At
     * this point the inputs and parameters have been set. After the function is
     * completed getOutput() will be called to retrieve the results.
     * 
     * @throws AbortException
     *             throws abort exception if the step was aborted.
     * @throws FailedException
     *             throws failed exception if the step failed to executed, or an
     *             error occurred during execution.
     */
    public void execute() throws AbortException, FailedException;
}
